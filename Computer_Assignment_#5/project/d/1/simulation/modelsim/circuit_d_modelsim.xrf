vendor_name = ModelSim
source_file = 1, C:/aidin/AIDIN/peregrine/term-3/Digital-systems/Cas/ca5/d/1/circuit_d.bdf
source_file = 1, C:/aidin/AIDIN/peregrine/term-3/Digital-systems/Cas/ca5/d/1/transmitter.v
source_file = 1, C:/aidin/AIDIN/peregrine/term-3/Digital-systems/Cas/ca5/d/1/bit_counter.v
source_file = 1, C:/aidin/AIDIN/peregrine/term-3/Digital-systems/Cas/ca5/d/1/sequencer.v
source_file = 1, C:/aidin/AIDIN/peregrine/term-3/Digital-systems/Cas/ca5/d/1/db/circuit_d.cbx.xml
design_name = circuit_d
instance = comp, \so~output , so~output, circuit_d, 1
instance = comp, \soen~output , soen~output, circuit_d, 1
instance = comp, \wake~output , wake~output, circuit_d, 1
instance = comp, \num[7]~output , num[7]~output, circuit_d, 1
instance = comp, \num[6]~output , num[6]~output, circuit_d, 1
instance = comp, \num[5]~output , num[5]~output, circuit_d, 1
instance = comp, \num[4]~output , num[4]~output, circuit_d, 1
instance = comp, \num[3]~output , num[3]~output, circuit_d, 1
instance = comp, \num[2]~output , num[2]~output, circuit_d, 1
instance = comp, \num[1]~output , num[1]~output, circuit_d, 1
instance = comp, \num[0]~output , num[0]~output, circuit_d, 1
instance = comp, \sin~input , sin~input, circuit_d, 1
instance = comp, \clk~input , clk~input, circuit_d, 1
instance = comp, \clk~inputclkctrl , clk~inputclkctrl, circuit_d, 1
instance = comp, \inst2|dcntr|contain[0]~8 , inst2|dcntr|contain[0]~8, circuit_d, 1
instance = comp, \inst|s_reg|contain[7]~feeder , inst|s_reg|contain[7]~feeder, circuit_d, 1
instance = comp, \rst~input , rst~input, circuit_d, 1
instance = comp, \rst~inputclkctrl , rst~inputclkctrl, circuit_d, 1
instance = comp, \inst|the_cnt|Add0~1 , inst|the_cnt|Add0~1, circuit_d, 1
instance = comp, \inst|the_cnt|contain[2]~5 , inst|the_cnt|contain[2]~5, circuit_d, 1
instance = comp, \inst|the_cnt|contain[2] , inst|the_cnt|contain[2], circuit_d, 1
instance = comp, \inst|the_cnt|Add0~0 , inst|the_cnt|Add0~0, circuit_d, 1
instance = comp, \inst|the_cnt|ns[3]~2 , inst|the_cnt|ns[3]~2, circuit_d, 1
instance = comp, \inst|the_cnt|contain[3] , inst|the_cnt|contain[3], circuit_d, 1
instance = comp, \inst1|next_state.rise_transmitter~0 , inst1|next_state.rise_transmitter~0, circuit_d, 1
instance = comp, \inst1|next_state.rise_nbit~0 , inst1|next_state.rise_nbit~0, circuit_d, 1
instance = comp, \inst1|previous_state.rise_nbit , inst1|previous_state.rise_nbit, circuit_d, 1
instance = comp, \inst1|Selector2~0 , inst1|Selector2~0, circuit_d, 1
instance = comp, \inst1|previous_state.wait_for_tr_signal , inst1|previous_state.wait_for_tr_signal, circuit_d, 1
instance = comp, \inst1|next_state.rise_transmitter~1 , inst1|next_state.rise_transmitter~1, circuit_d, 1
instance = comp, \inst1|previous_state.rise_transmitter , inst1|previous_state.rise_transmitter, circuit_d, 1
instance = comp, \inst2|dcntr|contain[1]~10 , inst2|dcntr|contain[1]~10, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~0 , inst2|dcntr|Add0~0, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~2 , inst2|dcntr|Add0~2, circuit_d, 1
instance = comp, \inst2|dcntr|contain[1] , inst2|dcntr|contain[1], circuit_d, 1
instance = comp, \inst2|dcntr|contain[2]~12 , inst2|dcntr|contain[2]~12, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~4 , inst2|dcntr|Add0~4, circuit_d, 1
instance = comp, \inst2|dcntr|contain[2] , inst2|dcntr|contain[2], circuit_d, 1
instance = comp, \inst2|dcntr|contain[3]~14 , inst2|dcntr|contain[3]~14, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~6 , inst2|dcntr|Add0~6, circuit_d, 1
instance = comp, \inst2|dcntr|contain[3] , inst2|dcntr|contain[3], circuit_d, 1
instance = comp, \inst2|dcntr|contain[4]~16 , inst2|dcntr|contain[4]~16, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~8 , inst2|dcntr|Add0~8, circuit_d, 1
instance = comp, \inst2|dcntr|contain[4] , inst2|dcntr|contain[4], circuit_d, 1
instance = comp, \inst2|dcntr|contain[5]~18 , inst2|dcntr|contain[5]~18, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~10 , inst2|dcntr|Add0~10, circuit_d, 1
instance = comp, \inst2|dcntr|contain[5] , inst2|dcntr|contain[5], circuit_d, 1
instance = comp, \inst2|dcntr|contain[6]~20 , inst2|dcntr|contain[6]~20, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~12 , inst2|dcntr|Add0~12, circuit_d, 1
instance = comp, \inst2|dcntr|contain[6] , inst2|dcntr|contain[6], circuit_d, 1
instance = comp, \inst2|dcntr|contain[7]~22 , inst2|dcntr|contain[7]~22, circuit_d, 1
instance = comp, \inst2|dcntr|Add0~14 , inst2|dcntr|Add0~14, circuit_d, 1
instance = comp, \inst2|dcntr|contain[7] , inst2|dcntr|contain[7], circuit_d, 1
instance = comp, \inst2|dcntr|Equal1~0 , inst2|dcntr|Equal1~0, circuit_d, 1
instance = comp, \inst2|dcntr|Equal1~1 , inst2|dcntr|Equal1~1, circuit_d, 1
instance = comp, \inst1|Selector3~0 , inst1|Selector3~0, circuit_d, 1
instance = comp, \inst1|previous_state.wait_to_get_back , inst1|previous_state.wait_to_get_back, circuit_d, 1
instance = comp, \inst1|Selector1~0 , inst1|Selector1~0, circuit_d, 1
instance = comp, \inst1|Selector1~1 , inst1|Selector1~1, circuit_d, 1
instance = comp, \inst1|previous_state.B , inst1|previous_state.B, circuit_d, 1
instance = comp, \inst1|next_state.C~0 , inst1|next_state.C~0, circuit_d, 1
instance = comp, \inst1|previous_state.C , inst1|previous_state.C, circuit_d, 1
instance = comp, \inst1|next_state.D~0 , inst1|next_state.D~0, circuit_d, 1
instance = comp, \inst1|previous_state.D , inst1|previous_state.D, circuit_d, 1
instance = comp, \inst1|next_state.E~0 , inst1|next_state.E~0, circuit_d, 1
instance = comp, \inst1|previous_state.E , inst1|previous_state.E, circuit_d, 1
instance = comp, \inst1|next_state.F~0 , inst1|next_state.F~0, circuit_d, 1
instance = comp, \inst1|previous_state.F , inst1|previous_state.F, circuit_d, 1
instance = comp, \inst1|next_state.G~0 , inst1|next_state.G~0, circuit_d, 1
instance = comp, \inst1|previous_state.G , inst1|previous_state.G, circuit_d, 1
instance = comp, \inst|the_cnt|contain[0]~6 , inst|the_cnt|contain[0]~6, circuit_d, 1
instance = comp, \inst|the_cnt|contain[0] , inst|the_cnt|contain[0], circuit_d, 1
instance = comp, \inst|the_cnt|contain[1]~4 , inst|the_cnt|contain[1]~4, circuit_d, 1
instance = comp, \inst|the_cnt|contain[1] , inst|the_cnt|contain[1], circuit_d, 1
instance = comp, \inst|the_cnt|Equal0~0 , inst|the_cnt|Equal0~0, circuit_d, 1
instance = comp, \inst|s_reg|contain[7] , inst|s_reg|contain[7], circuit_d, 1
instance = comp, \inst|s_reg|contain[6]~feeder , inst|s_reg|contain[6]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[6] , inst|s_reg|contain[6], circuit_d, 1
instance = comp, \inst|s_reg|contain[5]~feeder , inst|s_reg|contain[5]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[5] , inst|s_reg|contain[5], circuit_d, 1
instance = comp, \inst|s_reg|contain[4]~feeder , inst|s_reg|contain[4]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[4] , inst|s_reg|contain[4], circuit_d, 1
instance = comp, \inst|s_reg|contain[3]~feeder , inst|s_reg|contain[3]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[3] , inst|s_reg|contain[3], circuit_d, 1
instance = comp, \inst|s_reg|contain[2]~feeder , inst|s_reg|contain[2]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[2] , inst|s_reg|contain[2], circuit_d, 1
instance = comp, \inst|s_reg|contain[1]~feeder , inst|s_reg|contain[1]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[1] , inst|s_reg|contain[1], circuit_d, 1
instance = comp, \inst|s_reg|contain[0]~feeder , inst|s_reg|contain[0]~feeder, circuit_d, 1
instance = comp, \inst|s_reg|contain[0] , inst|s_reg|contain[0], circuit_d, 1
instance = comp, \inst2|dcntr|contain[0] , inst2|dcntr|contain[0], circuit_d, 1
instance = comp, \inst2|ooorrrr , inst2|ooorrrr, circuit_d, 1
instance = comp, \inst2|serout_en_reg~feeder , inst2|serout_en_reg~feeder, circuit_d, 1
instance = comp, \inst2|serout_en_reg , inst2|serout_en_reg, circuit_d, 1
instance = comp, \inst2|dcntr|Equal1~2 , inst2|dcntr|Equal1~2, circuit_d, 1
design_name = hard_block
instance = comp, \~ALTERA_DATA0~~ibuf , ~ALTERA_DATA0~~ibuf, hard_block, 1
instance = comp, \~ALTERA_ASDO~~ibuf , ~ALTERA_ASDO~~ibuf, hard_block, 1
instance = comp, \~ALTERA_NCSO~~ibuf , ~ALTERA_NCSO~~ibuf, hard_block, 1
